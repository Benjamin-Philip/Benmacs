#+TITLE: Really cool looking modeline
#+PROPERTY: header-args :tangle "~/.emacs.d/config/ui/theme/doom-modeline.el" :mkdirp yes 
This is doom-modeline, a really cool looking status line for emacs.
It looks really nice, and though it is pretty unecessary, and it 
probably will slow emacs down, I feel that We *must* have some aesthetic
quality in our configs. That's why people go flocking to Spacemacs, and doom
and what not. It just looks really good!


* use-package 

Let's use the package:

#+BEGIN_SRC emacs-lisp 
  (use-package doom-modeline
    :ensure t)
  (doom-modeline-mode 1)
#+END_SRC

* Set the dimensions

I have set the dimensions as 25 x 3.

#+BEGIN_SRC emacs-lisp 
  (setq doom-modeline-height 25)
  (setq doom-modeline-bar-width 3)
  (setq doom-modeline-window-width-limit fill-column) ;; if the window is too small, display less info
#+END_SRC

* Interact with files

Choose the program for interacting with files. I prefer projectile:

#+BEGIN_SRC emacs-lisp 
  (setq doom-modeline-project-detection 'projectile)
  (setq doom-modeline-buffer-file-name-style 'auto);; figure out how to diplay filename automatically
#+END_SRC

* Icons

These are all the settings to do with icons. You will need the package all-the-icons.
So :

#+BEGIN_SRC emacs-lisp 
  (use-package all-the-icons
    :ensure t)

  (setq doom-modeline-icon (display-graphic-p));; show icons
#+END_SRC 

And these are all the major-mode specific configs:

#+BEGIN_SRC emacs-lisp 
  (setq doom-modeline-major-mode-icon t) ;;display icons for major modes
  (setq doom-modeline-major-mode-color-icon t) ;;use the coloured icons

  (setq doom-modeline-buffer-modification-icon t) ;;display the modification icon
#+END_SRC

* Information displayed

This is the settings to do with what information doom-modeline shows.

** General information

This is the general information displayed:

#+BEGIN_SRC emacs-lisp 
  ;; Whether display the buffer encoding.
  (setq doom-modeline-buffer-encoding t)

  ;; Whether display the indentation information.
  (setq doom-modeline-indent-info nil)

  ;; If non-nil, only display one number for checker information if applicable.
  (setq doom-modeline-checker-simple-format t)

  ;; The maximum number displayed for notifications.
  (setq doom-modeline-number-limit 99)

  ;; The maximum displayed length of the branch name of version control.
  (setq doom-modeline-vcs-max-length 12)

  ;; Whether display the workspace name. Non-nil to display in the mode-line.
  (setq doom-modeline-workspace-name t)

  ;; Whether display the perspective name. Non-nil to display in the mode-line.
  (setq doom-modeline-persp-name t)

  ;; If non nil the default perspective name is displayed in the mode-line.
  (setq doom-modeline-display-default-persp-name nil)

  ;; If non nil the perspective name is displayed alongside a folder icon.
  (setq doom-modeline-persp-icon t)
#+END_SRC

** States and notifications

All the configs to do with stated with notifications:

#+BEGIN_SRC emacs-lisp 
  ;; Whether display the `lsp' state. Non-nil to display in the mode-line.
  (setq doom-modeline-lsp t)

  ;; Whether display the GitHub notifications. It requires `ghub' package.
  (setq doom-modeline-github nil)

  ;; The interval of checking GitHub.
  (setq doom-modeline-github-interval (* 30 60))

  ;; Whether display the modal state icon.
  ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
  (setq doom-modeline-modal-icon t)

  ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
  (setq doom-modeline-mu4e nil)

  ;; Whether display the gnus notifications.
  (setq doom-modeline-gnus t)

  ;; Wheter gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
  (setq doom-modeline-gnus-timer 2)

  ;; Wheter groups should be excludede when gnus automatically being updated.
  (setq doom-modeline-gnus-excluded-groups '("dummy.group"))

  ;; Whether display the IRC notifications. It requires `circe' or `erc' package.
  (setq doom-modeline-irc t)

  ;; Function to stylize the irc buffer names.
  (setq doom-modeline-irc-stylize 'identity)

#+END_SRC

** Environments

This is configurations to do with the languages where the development environment is shown:

#+BEGIN_SRC emacs-lisp 

  ;; Whether display the environment version.
  (setq doom-modeline-env-version t)
  ;; Or for individual languages
  (setq doom-modeline-env-enable-python t)
  (setq doom-modeline-env-enable-ruby t)
  (setq doom-modeline-env-enable-perl t)
  (setq doom-modeline-env-enable-go t)
  (setq doom-modeline-env-enable-elixir t)
  (setq doom-modeline-env-enable-rust t)

  ;; Change the executables to use for the language version string
  (setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
  (setq doom-modeline-env-ruby-executable "ruby")
  (setq doom-modeline-env-perl-executable "perl")
  (setq doom-modeline-env-go-executable "go")
  (setq doom-modeline-env-elixir-executable "iex")
  (setq doom-modeline-env-rust-executable "rustc")

  ;; What to dispaly as the version while a new one is being loaded
  (setq doom-modeline-env-load-string "...")

  ;; Hooks that run before/after the modeline version string is updated
  (setq doom-modeline-before-update-env-hook nil)
  (setq doom-modeline-after-update-env-hook nil)
#+END_SRC


* Nyan the Cat and Parrot

This a purely aesthetic (And probably distracting) package to enhance
Doom modeline. It is not at all functional. *Warning: MIND DUMBING CONTENT!*

#+BEGIN_SRC emacs-lisp 
  (use-package nyan-mode
    :ensure t) ;; install nyan the cat

  (setq nyan-animate-nyancat t) ;; animate the cat
  (setq nyan-wavy-trail nil) ;; cool wavy trail not required

  (nyan-mode)

  (use-package parrot
  :config
  (parrot-mode))
#+END_SRC

